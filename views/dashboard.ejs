<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard - CL Message</title>
    <link rel="stylesheet" href="/css/style.css">
    <link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700;900&family=Exo+2:wght@300;400;600&display=swap" rel="stylesheet">
</head>
<body>
    <div class="container">
        <div class="header">
            <h1 class="title glitch" data-text="DASHBOARD">DASHBOARD</h1>
            <p class="subtitle">Sistema de Gerenciamento de Mensagens</p>
        </div>

        <div class="cyber-card user-info">
            <div style="display: flex; align-items: center; margin-bottom: 1rem;">
                <img src="<%= user.avatar ? `https://cdn.discordapp.com/avatars/${user.id}/${user.avatar}.png` : '/default-avatar.png' %>" 
                     alt="Avatar" class="user-avatar">
                <div>
                    <h2>Bem-vindo, <%= user.username %>#<%= user.discriminator %></h2>
                    <p>ID: <%= user.id %></p>
                    <p style="color: #87ceeb; font-size: 0.9rem; margin-top: 0.5rem;">
                        ‚úÖ Sess√£o salva por 30 dias - Token salvo automaticamente
                    </p>
                </div>
            </div>
            <a href="/logout" class="cyber-button logout-btn">
                <span>LOGOUT</span>
                <div class="cyber-button__glow"></div>
            </a>
        </div>

        <!-- Configura√ß√£o do Token -->
        <div class="cyber-card">
            <h3>üîê CONFIGURAR TOKEN</h3>
            <p>Insira seu token do Discord uma vez e nunca mais precisar√° digitar</p>
            <div class="token-form">
                <div class="form-group">
                    <label for="discordToken">Token do Discord:</label>
                    <input type="password" id="discordToken" class="form-input" 
                           placeholder="Insira seu token aqui...">
                </div>
                <button onclick="saveToken()" class="cyber-button">
                    <span>SALVAR TOKEN</span>
                    <div class="cyber-button__glow"></div>
                </button>
            </div>
            <div id="tokenStatus" class="status-message" style="display: none;"></div>
            
            <!-- Status do Token -->
            <div class="token-status" style="margin-top: 1rem; padding: 0.5rem; border-radius: 5px; background: rgba(135, 206, 235, 0.1); border: 1px solid #87ceeb;">
                <p style="margin: 0; font-size: 0.9rem;">
                    <% if (token) { %>
                        ‚úÖ <strong>Token salvo:</strong> Voc√™ n√£o precisa digitar novamente
                    <% } else { %>
                        ‚ö†Ô∏è <strong>Nenhum token salvo:</strong> Configure abaixo
                    <% } %>
                </p>
            </div>
        </div>

        <!-- Grid de Funcionalidades -->
        <div class="function-grid">
            <!-- Limpar DM -->
            <div class="cyber-card">
                <h3>üßπ LIMPAR DM</h3>
                <p>Limpe suas mensagens em uma conversa privada</p>
                <div class="dm-form">
                    <div class="form-group">
                        <label for="channelId">Channel ID:</label>
                        <input type="text" id="channelId" class="form-input" 
                               placeholder="ID do canal da DM...">
                    </div>
                    <button onclick="clearDM()" class="cyber-button">
                        <span>INICIAR LIMPEZA</span>
                        <div class="cyber-button__glow"></div>
                    </button>
                </div>
                <div id="dmStatus" class="status-message" style="display: none;"></div>
            </div>

            <!-- Limpar Mensagens em Servidor -->
            <div class="cyber-card">
                <h3>üè¢ LIMPAR SERVIDOR</h3>
                <p>Limpe suas mensagens em um canal de servidor</p>
                <div class="server-form">
                    <div class="form-group">
                        <label for="serverId">Server ID:</label>
                        <input type="text" id="serverId" class="form-input" 
                               placeholder="ID do servidor...">
                    </div>
                    <div class="form-group">
                        <label for="serverChannelId">Channel ID:</label>
                        <input type="text" id="serverChannelId" class="form-input" 
                               placeholder="ID do canal...">
                    </div>
                    <button onclick="clearServerMessages()" class="cyber-button">
                        <span>LIMPAR MENSAGENS</span>
                        <div class="cyber-button__glow"></div>
                    </button>
                </div>
                <div id="serverStatus" class="status-message" style="display: none;"></div>
            </div>

            <!-- Sair de Servidores -->
            <div class="cyber-card">
                <h3>üö™ SAIR DE SERVIDORES</h3>
                <p>Saia de todos os servidores que voc√™ participa</p>
                <div class="leave-form">
                    <div class="form-group">
                        <p style="color: #87ceeb; font-size: 0.9rem;">
                            ‚ö†Ô∏è Esta a√ß√£o √© irrevers√≠vel. Voc√™ sair√° de TODOS os servidores.
                        </p>
                    </div>
                    <button onclick="leaveAllServers()" class="cyber-button" style="background: linear-gradient(45deg, #87ceeb, #ff6b6b);">
                        <span>SAIR DE TODOS OS SERVIDORES</span>
                        <div class="cyber-button__glow"></div>
                    </button>
                </div>
                <div id="leaveServersStatus" class="status-message" style="display: none;"></div>
            </div>

            <!-- Sair de Grupos DM -->
            <div class="cyber-card">
                <h3>üë• SAIR DE GRUPOS DM</h3>
                <p>Saia de todas as DMs em grupo (at√© 10 membros)</p>
                <div class="leave-form">
                    <div class="form-group">
                        <p style="color: #87ceeb; font-size: 0.9rem;">
                            ‚ö†Ô∏è Sair√° apenas de grupos pequenos, n√£o de DMs individuais.
                        </p>
                    </div>
                    <button onclick="leaveGroupDMs()" class="cyber-button" style="background: linear-gradient(45deg, #87ceeb, #ffa726);">
                        <span>SAIR DE GRUPOS DM</span>
                        <div class="cyber-button__glow"></div>
                    </button>
                </div>
                <div id="leaveGroupsStatus" class="status-message" style="display: none;"></div>
            </div>
        </div>

        <!-- Informa√ß√µes Importantes -->
        <div class="cyber-card">
            <h3>üéØ FUNCIONALIDADES</h3>
            <ul style="list-style: none; line-height: 1.6;">
                <li>‚úÖ <strong>Sess√£o permanente</strong> - 30 dias sem precisar refazer login</li>
                <li>‚úÖ <strong>Token salvo automaticamente</strong> - N√£o precisa digitar sempre</li>
                <li>‚úÖ <strong>Limpeza de DMs</strong> - Delete suas mensagens em conversas privadas</li>
                <li>‚úÖ <strong>Limpeza em servidores</strong> - Delete mensagens em canais de servidor</li>
                <li>‚úÖ <strong>Sair de servidores</strong> - Saia de todos os servidores de uma vez</li>
                <li>‚úÖ <strong>Sair de grupos DM</strong> - Saia de grupos pequenos automaticamente</li>
                <li>‚úÖ <strong>Rate limit autom√°tico</strong> - 0.4-2s entre a√ß√µes para evitar bloqueio</li>
                <li>‚ö†Ô∏è Mantenha seu token seguro e n√£o o compartilhe</li>
            </ul>
        </div>

        <!-- Guias -->
        <div class="cyber-card">
            <h3>üì± GUIA DE USO</h3>
            <div class="mobile-steps">
                <div class="step">
                    <h4>1. Configurar Token (Apenas uma vez)</h4>
                    <p>Configure seu token Discord para habilitar todas as fun√ß√µes</p>
                    <button onclick="showTokenGuide()" class="cyber-button" style="margin-top: 0.5rem;">
                        <span>COMO PEGAR TOKEN</span>
                    </button>
                </div>
                
                <div class="step">
                    <h4>2. Como obter IDs</h4>
                    <p><strong>Modo Desenvolvedor:</strong> Discord ‚Üí Configura√ß√µes ‚Üí Avan√ßado ‚Üí Modo Desenvolvedor (ON)</p>
                    <p><strong>Channel ID:</strong> Clique direito no canal ‚Üí Copiar ID</p>
                    <p><strong>Server ID:</strong> Clique direito no servidor ‚Üí Copiar ID</p>
                </div>

                <div class="step">
                    <h4>3. Funcionalidades de Limpeza</h4>
                    <p><strong>Limpar DM:</strong> Para conversas privadas individuais</p>
                    <p><strong>Limpar Servidor:</strong> Para canais em servidores</p>
                    <p><strong>‚ö†Ô∏è Aten√ß√£o:</strong> S√≥ deleta mensagens enviadas por voc√™</p>
                </div>

                <div class="step">
                    <h4>4. Funcionalidades de Sa√≠da</h4>
                    <p><strong>Sair de Servidores:</strong> Remove voc√™ de TODOS os servidores</p>
                    <p><strong>Sair de Grupos DM:</strong> Sai apenas de grupos com at√© 10 pessoas</p>
                    <p><strong>‚ö†Ô∏è Irrevers√≠vel:</strong> Estas a√ß√µes n√£o podem ser desfeitas</p>
                </div>
            </div>
        </div>
    </div>

    <div class="cyber-grid"></div>
    <div class="particles-container"></div>

    <script>
        // ========== SISTEMA DE TOKEN AUTOM√ÅTICO ========== //

        // Carregar token automaticamente ao abrir a p√°gina
        document.addEventListener('DOMContentLoaded', function() {
            const savedToken = '<%= token %>';
            console.log('Token salvo:', savedToken);
            
            if (savedToken && savedToken !== 'null' && savedToken !== '') {
                document.getElementById('discordToken').value = savedToken;
                showStatus('‚úÖ Token carregado automaticamente da sua sess√£o!', 'success');
            }
        });

        // Salvar token permanentemente
        function saveToken() {
            const token = document.getElementById('discordToken').value.trim();
            
            if (!token) {
                showStatus('‚ùå Por favor, insira um token v√°lido.', 'error');
                return;
            }

            if (!token.includes('.') || token.length < 50) {
                showStatus('‚ùå Token inv√°lido. Verifique o formato.', 'error');
                return;
            }
            
            showStatus('‚è≥ Salvando token permanentemente...', 'info');
            
            fetch('/save-token', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ token: token })
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Erro na resposta do servidor: ' + response.status);
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    showStatus('‚úÖ ' + data.message, 'success');
                    setTimeout(() => {
                        window.location.reload();
                    }, 2000);
                } else {
                    showStatus('‚ùå Erro: ' + data.error, 'error');
                }
            })
            .catch(error => {
                console.error('Erro completo:', error);
                if (error.message.includes('401')) {
                    showStatus('‚ùå Sess√£o expirada. Fa√ßa login novamente.', 'error');
                    setTimeout(() => {
                        window.location.href = '/';
                    }, 3000);
                } else {
                    showStatus('‚ùå Erro de conex√£o: ' + error.message, 'error');
                }
            });
        }

        // ========== FUN√á√ïES DE LIMPEZA ========== //

        function clearDM() {
            const channelId = document.getElementById('channelId').value.trim();
            
            if (!channelId) {
                showStatus('‚ùå Por favor, insira um Channel ID v√°lido.', 'error', 'dmStatus');
                return;
            }

            if (!/^\d+$/.test(channelId)) {
                showStatus('‚ùå Channel ID inv√°lido. Deve conter apenas n√∫meros.', 'error', 'dmStatus');
                return;
            }
            
            showStatus('üîß Iniciando limpeza de DM... Isso pode levar alguns minutos.', 'info', 'dmStatus');
            
            fetch('/clear-dm', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ channelId: channelId })
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Erro na resposta do servidor: ' + response.status);
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    showStatus('‚úÖ ' + data.message, 'success', 'dmStatus');
                } else {
                    showStatus('‚ùå ' + data.error, 'error', 'dmStatus');
                }
            })
            .catch(error => {
                console.error('Erro completo:', error);
                if (error.message.includes('401')) {
                    showStatus('‚ùå Sess√£o expirada. Fa√ßa login novamente.', 'error', 'dmStatus');
                } else if (error.message.includes('Token n√£o configurado')) {
                    showStatus('‚ùå Configure o token primeiro.', 'error', 'dmStatus');
                } else {
                    showStatus('‚ùå Erro de conex√£o: ' + error.message, 'error', 'dmStatus');
                }
            });
        }

        function clearServerMessages() {
            const serverId = document.getElementById('serverId').value.trim();
            const channelId = document.getElementById('serverChannelId').value.trim();
            
            if (!serverId || !channelId) {
                showStatus('‚ùå Server ID e Channel ID s√£o obrigat√≥rios.', 'error', 'serverStatus');
                return;
            }

            if (!/^\d+$/.test(serverId) || !/^\d+$/.test(channelId)) {
                showStatus('‚ùå IDs devem conter apenas n√∫meros.', 'error', 'serverStatus');
                return;
            }
            
            showStatus('üîß Iniciando limpeza no servidor... Isso pode levar alguns minutos.', 'info', 'serverStatus');
            
            fetch('/clear-server-messages', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ 
                    serverId: serverId,
                    channelId: channelId 
                })
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Erro na resposta do servidor: ' + response.status);
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    showStatus('‚úÖ ' + data.message, 'success', 'serverStatus');
                } else {
                    showStatus('‚ùå ' + data.error, 'error', 'serverStatus');
                }
            })
            .catch(error => {
                console.error('Erro completo:', error);
                if (error.message.includes('401')) {
                    showStatus('‚ùå Sess√£o expirada. Fa√ßa login novamente.', 'error', 'serverStatus');
                } else if (error.message.includes('Token n√£o configurado')) {
                    showStatus('‚ùå Configure o token primeiro.', 'error', 'serverStatus');
                } else {
                    showStatus('‚ùå Erro de conex√£o: ' + error.message, 'error', 'serverStatus');
                }
            });
        }

        // ========== FUN√á√ïES DE SA√çDA ========== //

        function leaveAllServers() {
            if (!confirm('‚ö†Ô∏è ATEN√á√ÉO: Voc√™ sair√° de TODOS os servidores. Esta a√ß√£o √© IRREVERS√çVEL!\n\nTem certeza que deseja continuar?')) {
                return;
            }
            
            showStatus('üö™ Saindo de todos os servidores... Isso pode levar alguns minutos.', 'info', 'leaveServersStatus');
            
            fetch('/leave-all-servers', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Erro na resposta do servidor: ' + response.status);
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    showStatus('‚úÖ ' + data.message, 'success', 'leaveServersStatus');
                } else {
                    showStatus('‚ùå ' + data.error, 'error', 'leaveServersStatus');
                }
            })
            .catch(error => {
                console.error('Erro completo:', error);
                if (error.message.includes('401')) {
                    showStatus('‚ùå Sess√£o expirada. Fa√ßa login novamente.', 'error', 'leaveServersStatus');
                } else if (error.message.includes('Token n√£o configurado')) {
                    showStatus('‚ùå Configure o token primeiro.', 'error', 'leaveServersStatus');
                } else {
                    showStatus('‚ùå Erro de conex√£o: ' + error.message, 'error', 'leaveServersStatus');
                }
            });
        }

        function leaveGroupDMs() {
            if (!confirm('‚ö†Ô∏è Voc√™ sair√° de todos os grupos DM com at√© 10 membros.\n\nTem certeza que deseja continuar?')) {
                return;
            }
            
            showStatus('üë• Saindo de grupos DM... Isso pode levar alguns minutos.', 'info', 'leaveGroupsStatus');
            
            fetch('/leave-group-dms', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Erro na resposta do servidor: ' + response.status);
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    showStatus('‚úÖ ' + data.message, 'success', 'leaveGroupsStatus');
                } else {
                    showStatus('‚ùå ' + data.error, 'error', 'leaveGroupsStatus');
                }
            })
            .catch(error => {
                console.error('Erro completo:', error);
                if (error.message.includes('401')) {
                    showStatus('‚ùå Sess√£o expirada. Fa√ßa login novamente.', 'error', 'leaveGroupsStatus');
                } else if (error.message.includes('Token n√£o configurado')) {
                    showStatus('‚ùå Configure o token primeiro.', 'error', 'leaveGroupsStatus');
                } else {
                    showStatus('‚ùå Erro de conex√£o: ' + error.message, 'error', 'leaveGroupsStatus');
                }
            });
        }

        // ========== FUN√á√ïES AUXILIARES ========== //

        function showTokenGuide() {
            const guide = `
üì± COMO PEGAR TOKEN NO DISCORD:

‚ö†Ô∏è ATEN√á√ÉO: NUNCA COMPARTILHE SEU TOKEN!

1. Abra o Discord no navegador (PC)
2. Pressione F12 ‚Üí Console (Abas Console/Console)
3. Cole este c√≥digo e pressione Enter:

copy(webpackChunkdiscord_app.push([[Math.random()], {}, (e) => { m=[]; for(let x in e.c) m.push(e.c[x]) }]), m.find(m => m?.exports?.getToken))?.exports?.getToken()

4. O token ser√° copiado automaticamente
5. Cole no campo acima e clique em SALVAR

üéØ APENAS UMA VEZ: Depois de salvo, nunca mais precisar√° fazer isso!
            `;
            alert(guide);
        }

        function showStatus(message, type, elementId = 'tokenStatus') {
            const statusDiv = document.getElementById(elementId);
            statusDiv.textContent = message;
            statusDiv.className = `status-message status-${type}`;
            statusDiv.style.display = 'block';
            
            statusDiv.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
            
            if (type !== 'info') {
                setTimeout(() => {
                    statusDiv.style.display = 'none';
                }, 5000);
            }
        }

        // Verificar se tem token salvo
        window.onload = function() {
            const hasToken = '<%= token %>' && '<%= token %>' !== 'null' && '<%= token %>' !== '';
            
            if (!hasToken) {
                showStatus('‚ö†Ô∏è Configure seu token uma vez para usar todas as funcionalidades!', 'info');
            }
        }
    </script>
</body>
</html>
